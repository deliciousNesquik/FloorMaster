//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FloorMaster.Database
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Partner
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Partner()
        {
            this.Requests = new HashSet<Requests>();
            this.TheHistoryOfChangesInTheMinimumCostForThePartner = new HashSet<TheHistoryOfChangesInTheMinimumCostForThePartner>();
            this.PointOfSale = new HashSet<PointOfSale>();
        }
    
        public int ID { get; set; }
        public int TheFormOfTheOrganization { get; set; }
        public string Title { get; set; }
        public string Surname { get; set; }
        public string Name { get; set; }
        public string Patronomic { get; set; }
        public string Mail { get; set; }
        public string PhoneNumber { get; set; }
        public int Index { get; set; }
        public string Region { get; set; }
        public string City { get; set; }
        public string Street { get; set; }
        public string HouseNumber { get; set; }
        public string INN { get; set; }
        public double Rating { get; set; }
        public byte[] Logo { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Requests> Requests { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TheHistoryOfChangesInTheMinimumCostForThePartner> TheHistoryOfChangesInTheMinimumCostForThePartner { get; set; }
        public virtual TheFormOfTheOrganization TheFormOfTheOrganization1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PointOfSale> PointOfSale { get; set; }

        private int Discount
        {
            get
            {
                if (FloorMasterEntities.GetContext().Requests.Where(p => p.Partner == ID).Count() != 0)
                {
                    int CountProduct = FloorMasterEntities.GetContext().Requests.Where(p => p.Partner == ID).Sum(p => p.CountProduct);
                    if (CountProduct <= 10000)
                    {
                        return 0;
                    }
                    else if (CountProduct <= 50000)
                    {
                        return 5; // 5%
                    }
                    else if (CountProduct <= 300000)
                    {
                        return 10; // 10%
                    }
                    else if (CountProduct > 300000)
                    {
                        return 15; // 15%
                    }
                    else
                    {
                        return 0;
                    }
                }
                else
                {
                    return -1;
                }
            }
        }

        public string TheFormOfTheOrganizationDisplay
        {
            get
            {
                return TheFormOfTheOrganization1.TypePartner;
            }
        }

        public string PhoneNumberFormat
        {
            get
            {
                if (PhoneNumber.Length == 11)
                {
                    //7 999 900 09 09
                    return $"+{PhoneNumber.Substring(0, 1)} ({PhoneNumber.Substring(1, 3)}) {PhoneNumber.Substring(4, 3)}-{PhoneNumber.Substring(7, 2)}-{PhoneNumber.Substring(9, 2)}";
                }
                else
                {
                    return PhoneNumber;
                }
            }
        }

        public string RatingFormat
        {
            get
            {
                if (Rating == (int)Rating)
                {
                    string Stars = "";
                    for (int i = 1; i <= Rating; i++)
                    {
                        Stars += "★";
                    }
                    Stars += " (" + Rating.ToString() + ",0)";
                    return Stars;
                }
                else
                {
                    string Stars = "";
                    int numberOfDigits = (int)Math.Log10(Math.Abs(Rating)) + 1;
                    int firstDigit = (int)(Rating / Math.Pow(10, numberOfDigits - 1));

                    for (int i = 1; i <= firstDigit; i++)
                    {
                        Stars += "★";
                    }
                    Stars += "☆";

                    Stars += " (" + Rating.ToString() + ")";
                    return Stars;
                }
            }
        }



        public string DiscountFormat
        {
            get
            {
                if (Discount == 0)
                {
                    return "Для продавца нет скидки!";
                }
                else if (Discount == -1)
                {
                    return "У продавца нет продаж!";
                }
                else
                {
                    return Discount.ToString() + "%";
                }
            }
        }
    }
}
